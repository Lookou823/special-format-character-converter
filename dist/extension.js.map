{"version":3,"file":"extension.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,uGCpBA,eAyIA,oBAAyBQ,GACvBA,EAAQC,cAAcC,KACpBC,EAAOC,SAASC,gBACd,gDACA,KACE,IAAIC,EAASH,EAAOI,OAAOC,iBAC3B,IAAKF,EACH,OAEF,MAAMG,EAAYH,EAAOG,UACzB,IAAIC,EAAOJ,EAAOK,SAASC,QAAQH,GACnCH,EAAOO,MAAMC,IACP,CAAC,MAAO,MAAMC,SAASL,GACzBI,EAAQE,QAAQP,EAnG5B,SAAsBC,GACpB,MAAgB,QAATA,EACH,4rCAgDA,+vBAmCN,CAcuCO,CAAaP,IAExCI,EAAQE,QAAQP,EAhI5B,SAAoBC,GAClB,MAAMQ,EArBR,SAAsBR,GAEpB,IAAIS,EAAcT,EAIlB,OAHIA,EAAKK,SAAS,OAChBI,EAAcT,EAAKM,QAHT,KAGsB,MAE9BG,EAAYJ,SAAS,KAChBI,EAAYC,MAAM,KAEpB,EACT,CAWoBC,CAAaX,GAC/B,KACEQ,EAAUI,OAAS,GACnB,CAAC,IAAK,IAAK,IAAK,KAAM,KAAKP,SAASG,EAAU,KAmB9C,OAAOR,EAAKa,cAlBZ,CACA,MAAMC,EAAON,EAAU,GACjBO,EAAUP,EAAUQ,MAAM,EAAGR,EAAUI,QAC7C,OAAQE,GACN,IAAK,IACH,OAAOd,EAAKa,cACd,IAAK,IACH,OAAOb,EAAKiB,cACd,IAAK,IACH,OAAOF,EAAQG,KAAK,KAAKD,cAC3B,IAAK,KACH,OAAOF,EAAQG,KAAK,KAAKL,cAC3B,IAAK,IACH,OAAiBE,EApBPI,KAAKC,GAAwBA,EAJ1CH,cACAX,QAAQ,eAAgBe,GAAmBA,EAAOR,kBAGDK,KAAK,IAqBrD,QACE,OAAOlB,E,CAKf,CAuGuCsB,CAAWtB,G,GAExC,IAIV,EAGA,wBAA8B,C","sources":["webpack://special-format-character-converter/external commonjs \"vscode\"","webpack://special-format-character-converter/webpack/bootstrap","webpack://special-format-character-converter/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from \"vscode\";\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nfunction getSplitText(text: string): string[] {\n  const reg = /-/g;\n  let operateText = text;\n  if (text.includes(\"-\")) {\n    operateText = text.replace(reg, \" \");\n  }\n  if (operateText.includes(\" \")) {\n    return operateText.split(\" \");\n  }\n  return [];\n}\n\nfunction firstUpperCase(str: string) {\n  return str\n    .toLowerCase()\n    .replace(/( |^)[a-z]/g, (letter: string) => letter.toUpperCase());\n}\nfunction getPascal(textList: string[]) {\n  return textList.map((word) => firstUpperCase(word)).join(\"\");\n}\nfunction changeText(text: string) {\n  const splitText = getSplitText(text);\n  if (\n    splitText.length > 1 &&\n    [\"c\", \"l\", \"u\", \"uc\", \"p\"].includes(splitText[0])\n  ) {\n    const flag = splitText[0];\n    const content = splitText.slice(1, splitText.length);\n    switch (flag) {\n      case \"c\":\n        return text.toUpperCase();\n      case \"l\":\n        return text.toLowerCase();\n      case \"u\":\n        return content.join(\"_\").toLowerCase();\n      case \"uc\":\n        return content.join(\"_\").toUpperCase();\n      case \"p\":\n        return getPascal(content);\n      default:\n        return text;\n    }\n  } else {\n    return text.toUpperCase();\n  }\n}\n\nfunction getModalCode(text: string) {\n  return text === \"mwf\"\n    ? `function ModalButtonDemo() {\n    const [form] = Form.useForm();\n    const [open, setOpen] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const showModal = () => {\n      setOpen(true);\n    };\n    const closeModal = () => {\n      setOpen(false);\n    };\n    return (\n      <>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            showModal();\n          }}\n        >\n          Click Me\n        </Button>\n        <Modal\n          destroyOnClose\n          title=\"Modal-Demo\"\n          open={open}\n          okButtonProps={{ loading }}\n          okText=\"Submit\"\n          onCancel={() => {\n            closeModal();\n          }}\n          onOk={() => {\n            setLoading(true);\n            // Attempting to mimic asynchronous behavior\n            setTimeout(() => {\n              setLoading(false);\n              closeModal();\n            }, 1000);\n          }}\n        >\n          <Form form={form} preserve={false}>\n            <Form.Item label=\"Description\" name=\"description\">\n              <Input style={{ width: 216 }} />\n            </Form.Item>\n          </Form>\n        </Modal>\n      </>\n    );\n  }\n  `\n    : `function ModalButtonDemo() {\n      const [open, setOpen] = useState(false);\n    \n      const showModal = () => {\n        setOpen(true);\n      };\n      const closeModal = () => {\n        setOpen(false);\n      };\n      return (\n        <>\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              showModal();\n            }}\n          >\n            Click Me\n          </Button>\n          <Modal\n            title=\"Modal-Demo\"\n            open={open}\n            okText=\"Submit\"\n            onCancel={() => {\n              closeModal();\n            }}\n            onOk={() => {\n              closeModal();\n            }}\n          >\n            <>children</>\n          </Modal>\n        </>\n      );\n    }`;\n}\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\n      \"special-format-character-converter.transform\",\n      () => {\n        let editor = vscode.window.activeTextEditor;\n        if (!editor) {\n          return; // No open text editor\n        }\n        const selection = editor.selection;\n        let text = editor.document.getText(selection);\n        editor.edit((builder) => {\n          if ([\"mwf\", \"pm\"].includes(text)) {\n            builder.replace(selection, getModalCode(text));\n          } else {\n            builder.replace(selection, changeText(text));\n          }\n        });\n      }\n    )\n  );\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","subscriptions","push","vscode","commands","registerCommand","editor","window","activeTextEditor","selection","text","document","getText","edit","builder","includes","replace","getModalCode","splitText","operateText","split","getSplitText","length","toUpperCase","flag","content","slice","toLowerCase","join","map","word","letter","changeText"],"sourceRoot":""}