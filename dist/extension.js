(()=>{"use strict";var n={496:n=>{n.exports=require("vscode")}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var s=e[o]={exports:{}};return n[o](s,s.exports,t),s.exports}var o={};(()=>{var n=o;Object.defineProperty(n,"__esModule",{value:!0}),n.deactivate=n.activate=void 0;const e=t(496);n.activate=function(n){n.subscriptions.push(e.commands.registerCommand("special-format-character-converter.transform",(()=>{let n=e.window.activeTextEditor;if(!n)return;const t=n.selection;let o=n.document.getText(t);n.edit((n=>{["mwf","pm","pd","dwf"].includes(o)?n.replace(t,function(n){switch(n){case"mwf":return'function ModalButton() {\n        const [form] = Form.useForm();\n        const [open, setOpen] = useState(false);\n        const [loading, setLoading] = useState(false);\n        const showModal = () => {\n          setOpen(true);\n        };\n        const closeModal = () => {\n          setOpen(false);\n        };\n        return (\n          <>\n            <Button\n              type="primary"\n              onClick={() => {\n                showModal();\n              }}\n            >\n              Click Me\n            </Button>\n            <Modal\n              destroyOnClose\n              title="ModalDemo"\n              open={open}\n              okButtonProps={{ loading }}\n              okText="Submit"\n              onCancel={() => {\n                closeModal();\n              }}\n              onOk={() => {\n                form.validateFields().then(values => {\n                  setLoading(true);\n                  // Attempting to mimic asynchronous behavior\n                  setTimeout(() => {\n                    setLoading(false);\n                    closeModal();\n                  }, 1000);\n                });\n              }}\n            >\n              <Form form={form} preserve={false} labelCol={{ span: 4 }} wrapperCol={{ span: 20 }}>\n                <Form.Item label="Description" name="description">\n                  <Input style={{ width: 216 }} />\n                </Form.Item>\n              </Form>\n            </Modal>\n          </>\n        );\n      }';case"pm":return'function ModalButton() {\n        const [open, setOpen] = useState(false);\n      \n        const showModal = () => {\n          setOpen(true);\n        };\n        const closeModal = () => {\n          setOpen(false);\n        };\n        return (\n          <>\n            <Button\n              type="primary"\n              onClick={() => {\n                showModal();\n              }}\n            >\n              Click Me\n            </Button>\n            <Modal\n              title="ModalDemo"\n              open={open}\n              okText="Submit"\n              onCancel={() => {\n                closeModal();\n              }}\n              onOk={() => {\n                closeModal();\n              }}\n            >\n              <>children</>\n            </Modal>\n          </>\n        );\n      }';case"dwf":return'export function BasicDrawer() {\n        const [open, setOpen] = useState(false);\n        const [loading, setLoading] = useState(false);\n        const [form] = Form.useForm();\n        const showDrawer = () => {\n          setOpen(true);\n        };\n      \n        const onClose = () => {\n          setOpen(false);\n        };\n      \n        const onConfirm = () => {\n          form.validateFields().then(values => {\n            setLoading(true);\n            setTimeout(() => {\n              setLoading(false);\n              setOpen(false);\n            }, 1000);\n          });\n        };\n        return (\n          <>\n            <Button type="primary" onClick={showDrawer}>\n              Click Me\n            </Button>\n            <Drawer\n              title="BasicDrawer"\n              placement="right"\n              size="large"\n              open={open}\n              extra={\n                <Space>\n                  <Button onClick={onClose}>Cancel</Button>\n                  <Button type="primary" loading={loading} onClick={onConfirm}>\n                    Confirm\n                  </Button>\n                </Space>\n              }\n              onClose={onClose}\n            >\n              <Form form={form} labelCol={{ span: 4 }} wrapperCol={{ span: 20 }}>\n                <Form.Item\n                  label="Description"\n                  name="description"\n                  rules={[{ required: true, message: \'Description is required\' }]}\n                >\n                  <Input style={{ width: 216 }} />\n                </Form.Item>\n              </Form>\n            </Drawer>\n          </>\n        );\n      }\n      ';case"pd":return'export function BasicDrawer() {\n        const [open, setOpen] = useState(false);\n      \n        const showDrawer = () => {\n          setOpen(true);\n        };\n      \n        const onClose = () => {\n          setOpen(false);\n        };\n      \n        const onConfirm = () => {\n          setOpen(false);\n        };\n        return (\n          <>\n            <Button type="primary" onClick={showDrawer}>\n              Click Me\n            </Button>\n            <Drawer\n              title="BasicDrawer"\n              placement="right"\n              size="large"\n              open={open}\n              extra={\n                <Space>\n                  <Button onClick={onClose}>Cancel</Button>\n                  <Button type="primary" onClick={onConfirm}>\n                    Confirm\n                  </Button>\n                </Space>\n              }\n              onClose={onClose}\n            >\n              <p>Some contents...</p>\n            </Drawer>\n          </>\n        );\n      }\n      ';default:return n}}(o)):n.replace(t,function(n){const e=function(n){let e=n;return n.includes("-")&&(e=n.replace(/-/g," ")),n.includes("_")&&(e=n.replace(/_/g," ")),e.includes(" ")?e.split(" "):[]}(n);if(!(e.length>1&&["c","l","u","uc","p"].includes(e[0])))return n.toUpperCase();{const t=e[0],o=e.slice(1,e.length);switch(t){case"c":return n.toUpperCase();case"l":return n.toLowerCase();case"u":return o.join("_").toLowerCase();case"uc":return o.join("_").toUpperCase();case"p":return o.map((n=>n.toLowerCase().replace(/( |^)[a-z]/g,(n=>n.toUpperCase())))).join("");default:return n}}}(o))}))})))},n.deactivate=function(){}})(),module.exports=o})();